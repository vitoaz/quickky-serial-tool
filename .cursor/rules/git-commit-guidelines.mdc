---
alwaysApply: true
---
# Git 提交规范

## 提交前检查清单

在执行 git commit 之前，必须完成以下检查：

### 1. 文档同步检查

确保以下文档与最新代码实现保持一致：

- **[README.md](mdc:README.md)** - 项目介绍、功能说明、使用方法
- **[QUICKSTART.md](mdc:QUICKSTART.md)** - 快速开始指南、安装步骤

如果代码有以下变更，必须更新文档：
- 新增功能或特性
- 修改用户界面
- 变更配置方式
- 修改使用方法
- 更新依赖项

### 2. 提交信息确认

**重要**: 提交前必须向用户展示提交信息并获得确认：

1. 列出将要提交的文件
2. 展示建议的提交信息（commit message）
3. 等待用户确认或修改
4. 只有用户明确同意后才执行提交

### 3. 提交信息格式

建议使用以下格式：

```
<type>: <subject>

<body>
```

**Type 类型：**
- `feat`: 新功能
- `fix`: 修复bug
- `docs`: 文档更新
- `style`: 代码格式调整
- `refactor`: 重构代码
- `test`: 测试相关
- `chore`: 构建/工具变动

**示例：**
```
feat: 添加新功能

- 功能点1描述
- 功能点2描述
- 相关配置或文档更新
```

## Git 中文编码配置

为避免提交信息中文乱码问题，需要进行以下配置：

### Windows PowerShell 临时设置

每次在 PowerShell 中使用 Git 前执行：

```bash
# 设置 PowerShell 使用 UTF-8 编码
chcp 65001
```

### 提交中文信息的最佳实践

**方法1：使用文件方式提交（推荐）**

```bash
# 1. 创建临时文件写入提交信息
echo "feat: 实现新功能

- 功能点1
- 功能点2" > commit_msg.txt

# 2. 使用文件提交
git commit -F commit_msg.txt

# 3. 删除临时文件
del commit_msg.txt
```

**方法2：使用简短的单行信息**

```bash
git commit -m "feat: 实现新功能"
```

**注意事项：**
- 避免在 PowerShell 中使用多行 `-m` 参数
- 复杂的提交信息建议使用文件方式
- 提交后使用 `git log -1` 验证中文显示正常

## 提交流程

```
1. 完成代码修改
2. 检查并更新 README.md 和 QUICKSTART.md
3. 配置 Git 中文编码（如未配置）
4. 展示提交信息给用户
5. 执行 git add 和 git commit（使用文件方式处理中文）
6. 验证提交信息显示正常
```

**禁止在未经用户确认的情况下自动提交代码。**
