---
globs: *.py
description: 代码编写最佳实践
---

# 编码最佳实践

## 文件头部模板

每个Python文件应包含以下标准头部：

```python
"""
[模块功能描述]

Author: Aaz
Email: vitoyuz@foxmail.com
"""

import 语句...
```

## 代码组织

### 导入顺序

按以下顺序组织import语句：

1. 标准库导入
2. 第三方库导入
3. 本地应用/库导入

每组之间空一行：

```python
# 标准库
import os
import sys
from datetime import datetime

# 第三方库
import third_party_lib1
import third_party_lib2

# 本地导入
from utils.module_name import ClassName
from components.component_name import ComponentClass
```

### 类和函数

类和函数应包含适当的文档字符串：

```python
class MyClass:
    """类的功能描述"""
    
    def __init__(self, param1, param2):
        """
        初始化方法
        
        Args:
            param1 (type): 参数1描述
            param2 (type): 参数2描述
        """
        pass
    
    def method_name(self):
        """方法功能描述"""
        pass
```

## 异常处理

使用具体的异常类型，避免使用裸except：

```python
try:
    # 操作代码
    pass
except SpecificException as e:
    print(f"具体错误描述: {e}")
except AnotherException as e:
    print(f"另一种错误描述: {e}")
```

## 日志记录

建议使用Python logging模块：

```python
import logging

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

logger = logging.getLogger(__name__)
logger.info("应用程序启动")
```

## 类型提示

Python 3.5+支持类型提示，建议使用：

```python
from typing import List, Optional

def get_items() -> List[str]:
    """返回列表的函数"""
    return []

def process_item(item: str, value: int = 100) -> Optional[object]:
    """处理单个项目的函数"""
    pass
```

## 常量定义

在模块顶部定义常量，按类别分组：

```python
# 配置相关常量
DEFAULT_VALUE_1 = 100
DEFAULT_VALUE_2 = 200

# 格式或类型常量
TYPE_A = 'TYPE_A'
TYPE_B = 'TYPE_B'
```